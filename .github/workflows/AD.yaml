name: Build

on:
  workflow_dispatch:
  schedule:
    - cron: "5 0,12 * * *"

jobs:
  Build:
    runs-on: ubuntu-latest
    env:
      TZ: "Asia/Shanghai"
      SING_BOX_VERSION: 1.10.5

    steps:
    - name: Checkout Repository (Tool)
      uses: actions/checkout@v4.2.2
      with:
        repository: Repcz/Tool
        path: temp

    - name: GeoIP
      run: |
        mkdir -p Tool/GeoIP
        curl -L -o temp/GeoIP/CN_Country.mmdb "https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country-only-cn-private.mmdb"
        curl -L -o temp/GeoIP/Global_Country.mmdb "https://raw.githubusercontent.com/Loyalsoldier/geoip/release/Country-without-asn.mmdb"

    - name: Run Bash Script (Ad Rules Only)
      run: |
        #!/bin/bash
        repo_name=$(basename "$GITHUB_REPOSITORY")
        if [[ "$repo_name" == "Tool" ]]; then
            echo "Running in Tool repository"
            mkdir -p temp/Ruleset

            urls=(
                "https://raw.githubusercontent.com/ConnersHua/RuleGo/master/Surge/Ruleset/Extra/Reject/Advertising.list"
                "https://raw.githubusercontent.com/ConnersHua/RuleGo/master/Surge/Ruleset/Extra/Reject/Malicious.list"
                "https://raw.githubusercontent.com/ConnersHua/RuleGo/master/Surge/Ruleset/Extra/Reject/Tracking.list"
                "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/BanEasyListChina.list"
                "https://raw.githubusercontent.com/Repcz/Tool/X/Surge/Custom/Reject.list"
            )
            > temp/Ruleset/Reject.list
            for url in "${urls[@]}"; do
                echo "Downloading: $url"
                curl -f -L -H "Accept-Language: en-us" "$url" >> temp/Ruleset/Reject.list || { echo "Download Failed: $url"; exit 1; }
                echo "" >> temp/Ruleset/Reject.list
            done

            urls=(
                "https://ruleset.skk.moe/List/domainset/reject.conf"
                "https://ruleset.skk.moe/List/non_ip/reject.conf"
            )
            > temp/Ruleset/Ads_SukkaW.list
            for url in "${urls[@]}"; do
                echo "Downloading: $url"
                curl -f -L -H "Accept-Language: en-us" "$url" >> temp/Ruleset/Ads_SukkaW.list || { echo "Download Failed: $url"; exit 1; }
                echo "" >> temp/Ruleset/Ads_SukkaW.list
            done

            files=(
                "Ads_limbopro.list https://raw.githubusercontent.com/limbopro/Adblock4limbo/main/Surge/rule/Adblock4limbo_surge.list"
                "Ads_EasyListChina.list https://raw.githubusercontent.com/limbopro/Adblock4limbo/main/rule/Surge/easylistchina_surge.list"
                "Ads_EasyListPrivacy.list https://raw.githubusercontent.com/limbopro/Adblock4limbo/main/rule/Surge/easyprivacy_surge.list"
                "Ads_Dlerio.list https://raw.githubusercontent.com/dler-io/Rules/main/Surge/Surge%203/Provider/AdBlock.list"
                "Ads_AWAvenue.list https://raw.githubusercontent.com/TG-Twilight/AWAvenue-Ads-Rule/main/Filters/AWAvenue-Ads-Rule-Surge.list"
                "AdGuardChinese.list https://raw.githubusercontent.com/geekdada/surge-list/master/domain-set/chinese-filter.txt"
                "Ads_DiDiChuXing.list https://raw.githubusercontent.com/Repcz/Tool/X/Surge/Custom/Ads_DiDiChuXing.list"
            )
            for file in "${files[@]}"; do
                set -- $file
                echo "Downloading: $2"
                curl -A "Surge iOS/3367" -H "Accept-Language: en-us" -f -L -o "temp/Ruleset/$1" "$2" || { echo "Download Failed: $2"; exit 1; }
            done
            echo "Ad-related files downloaded successfully."
        else
            echo "Unknown repository. Please run this script in either Tool or Tool repository."
            exit 1
        fi

    - name: Source build
      run: |
        for file in temp/Ruleset/*.list ; do
          if [ -f "$file" ]; then
            sed -i '/^\./s/^\./DOMAIN-SUFFIX,/' "$file"
            sed -i -E '/^\s*$/b; /^\s*[#;]/b; /^DOMAIN,|^DOMAIN-SUFFIX,|^DOMAIN-KEYWORD,|^DOMAIN-WILDCARD,|^IP-CIDR,|^IP-CIDR6,|^IP-ASN,|^GEOIP,|^AND,|^OR,|^NOT,|^URL-REGEX,|^USER-AGENT,|^PROCESS-NAME,|^DEST-PORT,/b; s/^([^#])/DOMAIN,\1/' "$file"
            sed -i -e '/^\s*[#;]/d' -e '/^$/d' -e 's| //.*||'  "$file"
            sed -i -e '/DOMAIN,this_ruleset_is_made_by_sukkaw.ruleset.skk.moe/d' "$file"
            sed -i -e '/DOMAIN,th1s_rule5et_1s_m4d3_by_5ukk4w_ruleset.skk.moe/d' "$file"
            sed -i -e '/DOMAIN,this_rule_set_is_made_by_sukkaw.skk.moe/d' "$file"
            sed -i -e 's/,reject$//' "$file"
            sed -i 's/, */,/g' "$file"
          else
            echo "$file not found."
          fi
        done

    - name: Source sort
      run: |
        for file in temp/Ruleset/*.list ; do
          if [ -f "$file" ]; then
            sed -i -E '/^IP-CIDR,/!{/^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\/[0-9]+/s/^/IP-CIDR,/}' "$file"
            sed -i -E '/^IP-CIDR6,/!{/^[a-fA-F0-9]+:|([a-fA-F0-9]+:+)+[a-fA-F0-9]+\/[0-9]+/s/^/IP-CIDR6,/}' "$file"
            awk '
            /^DOMAIN,/         { print "0 " $0; next }
            /^DOMAIN-SUFFIX,/  { print "1 " $0; next }
            /^DOMAIN-KEYWORD,/ { print "2 " $0; next }
            /^DOMAIN-WILDCARD,/{ print "3 " $0; next }
            /^IP-CIDR,/        { print "4 " $0; next }
            /^IP-CIDR6,/       { print "5 " $0; next }
            /^IP-ASN,/         { print "6 " $0; next }
            /^PROCESS-NAME,/   { print "7 " $0; next }
            /^URL-REGEX,/      { print "8 " $0; next }
            /^USER-AGENT,/     { print "9 " $0; next }
            /^GEOIP,/          { print "10 " $0; next }
            /^AND,/            { print "11 " $0; next }
            /^OR,/             { print "12 " $0; next }
            /^NOT,/            { print "13 " $0; next }
            /^DEST-PORT,/      { print "14 " $0; next }
                               { print "15 " $0; next }
            ' "$file" | sort -k1,1n -k2,2 | cut -d' ' -f2- > "$file.sorted" && mv "$file.sorted" "$file"
            awk '!seen[tolower($0)]++' "$file" > temp && mv temp "$file"
          else
            echo "$file not found."
          fi
        done

    - name: Copy files
      run: |
        rm -rf temp/{Clash,Loon,Surge,sing-box}/Rules
        mkdir -p temp/{Clash,Egern,Loon,QuantumultX,Shadowrocket,Stash,Surge,sing-box,mihomo}/Rules
        for file in temp/Ruleset/*.list; do
          filename=$(basename "$file")
          for dir in Clash Loon QuantumultX Shadowrocket Stash Surge mihomo; do
            mkdir -p "temp/$dir/Rules"
            cp "$file" "temp/$dir/Rules/$filename"
          done
          mkdir -p "temp/sing-box/Rules"
          cp "$file" "temp/sing-box/Rules/${filename%.*}.json"
        done
        echo "Files copied successfully."

    - name: mihomo
      run: |
        rm -rf temp/Ruleset
        for file in temp/{Clash,mihomo}/Rules/*.list; do
          if [ -f "$file" ]; then
            sed -i -e '/^USER-AGENT/d' "$file"
            sed -i -e '/^URL-REGEX/d' "$file"
            sed -i 's/DOMAIN-WILDCARD/DOMAIN-REGEX/g' "$file"
            file_names=$(basename "$file" .list)
            line_count=$(wc -l < "$file")
            awk -v fname="$file_names" 'NR==1 {print "# 规则名称: " fname} {print}' "$file" > tmpfile && mv tmpfile "$file"
            awk -v count="$line_count" 'NR==2 {print "# 规则统计: " count} {print}' "$file" > tmpfile && mv tmpfile "$file"
            sed -i '2a\\' "$file"
          else
            echo "$file not found."
          fi
        done
  
    - name: Loon
      run: |
        for file in temp/Loon/Rules/*.list; do
          if [ -f "$file" ]; then
            sed -i -e '/^PROCESS-NAME/d' "$file"
            file_names=$(basename "$file" .list)
            line_count=$(wc -l < "$file")
            awk -v fname="$file_names" 'NR==1 {print "# 规则名称: " fname} {print}' "$file" > tmpfile && mv tmpfile "$file"
            awk -v count="$line_count" 'NR==2 {print "# 规则统计: " count} {print}' "$file" > tmpfile && mv tmpfile "$file"
            sed -i '2a\\' "$file"
          else
            echo "$file not found."
          fi
        done

    - name: Surge
      run: |
        for file in temp/Surge/Rules/*.list; do
          if [ -f "$file" ]; then
            file_names=$(basename "$file" .list)
            line_count=$(wc -l < "$file")
            awk -v fname="$file_names" 'NR==1 {print "# 规则名称: " fname} {print}' "$file" > tmpfile && mv tmpfile "$file"
            awk -v count="$line_count" 'NR==2 {print "# 规则统计: " count} {print}' "$file" > tmpfile && mv tmpfile "$file"
            sed -i '2a\\' "$file"
          else
            echo "$file not found."
          fi
        done

    - name: sing-box
      run: |
        curl -L -o sing-box.tar.gz https://github.com/SagerNet/sing-box/releases/download/v${SING_BOX_VERSION}/sing-box-${SING_BOX_VERSION}-linux-amd64.tar.gz
        tar -xzf sing-box.tar.gz
        chmod +x sing-box-${SING_BOX_VERSION}-linux-amd64/sing-box
        sudo mv sing-box-${SING_BOX_VERSION}-linux-amd64/sing-box /usr/local/bin/sing-box
        sing-box version
        for file in temp/sing-box/Rules/*.json; do
          if [ -f "$file" ]; then
            sed -i -e '/^PROCESS-NAME/d' "$file"
            sed -i -e '/^AND/d' "$file"
            sed -i -e '/^OR/d' "$file"
            sed -i -e '/^NOT/d' "$file"
            sed -i -e '/^DEST-PORT/d' "$file"
            sed -i -e '/^USER-AGENT/d' "$file"
            sed -i -e '/^URL-REGEX/d' "$file"
            sed -i -e '/^DOMAIN-WILDCARD/d' "$file"
            sed -i -e '/^GEOIP/d' "$file"
            sed -i -e '/^#/d' "$file"
            sed -i -e '/^$/d' "$file"

            temp_file=$(mktemp)
            echo '{' > "$temp_file"
            echo '  "version": 2,' >> "$temp_file"
            echo '  "rules": [' >> "$temp_file"
            domains=$(grep -E '^DOMAIN,' "$file" | cut -d, -f2)
            if [ -n "$domains" ]; then
              domain_array=$(echo "$domains" | jq -R . | jq -s .)
              echo '    {' >> "$temp_file"
              echo '      "domain": [' >> "$temp_file"
              echo "$domain_array" | jq -r '.[]' | sed 's/^/        "/;s/$/",/' >> "$temp_file"
              sed -i '$ s/,$//' "$temp_file"
              echo '      ]' >> "$temp_file"
              echo '    },' >> "$temp_file"
            fi
            domain_suffixes=$(grep -E '^DOMAIN-SUFFIX,' "$file" | cut -d, -f2)
            if [ -n "$domain_suffixes" ]; then
              domain_suffix_array=$(echo "$domain_suffixes" | jq -R . | jq -s .)
              echo '    {' >> "$temp_file"
              echo '      "domain_suffix": [' >> "$temp_file"
              echo "$domain_suffix_array" | jq -r '.[]' | sed 's/^/        "/;s/$/",/' >> "$temp_file"
              sed -i '$ s/,$//' "$temp_file"
              echo '      ]' >> "$temp_file"
              echo '    },' >> "$temp_file"
            fi
            domain_keywords=$(grep -E '^DOMAIN-KEYWORD,' "$file" | cut -d, -f2)
            if [ -n "$domain_keywords" ]; then
              domain_keyword_array=$(echo "$domain_keywords" | jq -R . | jq -s .)
              echo '    {' >> "$temp_file"
              echo '      "domain_keyword": [' >> "$temp_file"
              echo "$domain_keyword_array" | jq -r '.[]' | sed 's/^/        "/;s/$/",/' >> "$temp_file"
              sed -i '$ s/,$//' "$temp_file"
              echo '      ]' >> "$temp_file"
              echo '    },' >> "$temp_file"
            fi
            ip_cidrs=$(grep -E '^IP-CIDR,|^IP-CIDR6,' "$file" | cut -d, -f2)
            if [ -n "$ip_cidrs" ]; then
              ip_cidr_array=$(echo "$ip_cidrs" | jq -R . | jq -s .)
              echo '    {' >> "$temp_file"
              echo '      "ip_cidr": [' >> "$temp_file"
              echo "$ip_cidr_array" | jq -r '.[]' | sed 's/^/        "/;s/$/",/' >> "$temp_file"
              sed -i '$ s/,$//' "$temp_file"
              echo '      ]' >> "$temp_file"
              echo '    }' >> "$temp_file"
            fi
            sed -i '$ s/,$//' "$temp_file"
            echo '  ]' >> "$temp_file"
            echo '}' >> "$temp_file"
            mv "$temp_file" "$file"
            sing-box rule-set compile "$file" -o "${file%.json}.srs"
            rm -rf sing-box sing-box-${SING_BOX_VERSION}-linux-amd64 sing-box.tar.gz
          else
            echo "$file not found."
          fi
        done
      
    - name: Checkout Repository (Rules)
      uses: actions/checkout@v4.2.2
      with:
        repository: qiuxiuya/Rules
        token: ${{ secrets.GITHUB_TOKEN }} # 使用GITHUB_TOKEN进行认证
        path: Rules-repo
        ref: rules # 指定rules分支

    - name: Copy Rules to Rules Repository
      run: |
        mkdir -p Rules-repo/Loon
        mkdir -p Rules-repo/Surge
        mkdir -p Rules-repo/mihomo
        mkdir -p Rules-repo/sing-box

        cp -r temp/Loon/Rules/* Rules-repo/Loon/
        cp -r temp/Surge/Rules/* Rules-repo/Surge/
        cp -r temp/mihomo/Rules/* Rules-repo/mihomo/
        cp -r temp/sing-box/Rules/* Rules-repo/sing-box/

    - name: Push Update to Rules Repository
      run: |
        cd Rules-repo
          if [[ -n $(git status -s) ]]; then
            git config --local user.email "${{ github.actor }}@users.noreply.github.com"
            git config --local user.name "${{ github.actor }}"
            git add -A
            git commit -m "Update(Rules): $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')"
            git push origin rules
          else
            echo "No changes to commit."
          fi

    - name: Cleanup Workflow
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2